===============================================================
task 0: say if the sentence is ok or no ok

Possible errors:
- 2 letters together											                                    Ex: "(pq&p)"
- 2 symbols (including parentheses) together							                    Ex: "()p&q", Ex: "p&&q"
- parentheses don't match (there are more "(" than ")" or vice versa)			    Ex: "((p&q)|p"		: there are more "(" than ")"
- in some moment there are more ")" than "("							                    Ex: "(p&q))(q->p)("	: in pos 5 there are more ")" than "("
- there are other characters appart from letters and the appropiate symbols		Ex: "p&q/@%"



===============================================================
task 1.1: make a program that makes sytactic trees (version 1 - doesn't work)

Decompose the string until the end, and save every step to a list.

Do this recursively until the string is an atomic sentence:
	1. Divide the string into 2 by the main connector (the one inside only 1 parentesis)
	2. Handle ¬ (not) in both parts
* Check that the sentence is OK before each step (task0)
Then print the steps of the list.


1 - ["((p&q)|¬r)"]
2 - ["(p&q)", "¬r"]	    # divide by main connector
3 - ["(p&q)", ["r"]]	  # handle not
4 - [["p","q"],["r"]]	  # divide by main connector
5 - [["p","q"],["r"]]	  # handle not

At the same time, every step is saved in this list:
1 - ["((p&q)|¬r)"]

2 - [["((p&q)|¬r)"], 
    ["(p&q)", "¬r"]]

3 - [["((p&q)|¬r)"], 
    ["(p&q)", "¬r"], 
    ["(p&q)", ["r"]]]

4 - [["((p&q)|¬r)"], 
    ["(p&q)", "¬r"], 
    ["(p&q)", ["r"]], 
    [["p","q"],["r"]]]

5 - [["((p&q)|¬r)"], 
    ["(p&q)", "¬r"], 
    ["(p&q)", ["r"]], 
    [["p","q"],["r"]]]
  # The list remains the same as the step is the same as the previous one

Printing the nested list:
  1. Each element is a step. Print 1 step per line.
  2. Each step is a list of the parts. The line will be each part separated by comma.

--- Console ---
((p&q)|¬r)
(p&q), ¬r
(p&q), r
p, q, r


- Quan s'acaba la funció syntactic_tree?
  Quan tots els elements de la llista són atomic sentences.
- Com sap cada part de quina part prèvia prové?
- Com es fa per saber que "(pp&q)" està bé però "pp" no?

===============================================================
task 1.1: make a program that makes sytactic trees (version 2)

Steps:
if sentence is not ok:
  print error and stop the program
elif is atomic sentence:
  don't touch it
else:
  new_sentence = divide_by_main_conector
  if new_sentence == old_sentence:
    new_sentence = handle_not
  add the child (with value = new_sentence) to the list

- Put the parent sentence in a list
- Make the steps and save the children in the same list, removing the parent
- Repeat the process

Example:
A = "((p&q)|¬r)"
AA = "(p&q)"
AB = "¬r"
AAA = "p"
AAB = "q"
ABA = "r"

1 - [A]
2 - [AA,AB]
3 - [AAA,AAB,ABA] # List with the atomic sentences

To print the tree, print as much lines as atomic sentences, with their parents, grandparents... in the left:
((p&q)|¬r) ==> (p&q) ==> p
((p&q)|¬r) ==> (p&q) ==> q
((p&q)|¬r) ==> ¬r ==> r

- Com es fa per saber que "(pp&q)" està bé però "pp" no?
- El not sempre va fora de parentesis

Task 2


Task 5

- Disjunction Normal Form
- Conjunction Normal Form
- NAND Form
- NOR Form